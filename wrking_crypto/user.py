
from Crypto.Hash import SHA256, RIPEMD160
from Crypto.PublicKey import RSA
from Crypto.Signature import pss

class User():

    '''
        Class to represent the data of each User in the network,
        class here primarily for testing... All this data will be implemented
        elsewhere eventually

        Attributes
        -------------

        prk: RSA Private Key Object
            This user's Private key, used for signing

        puk: RSA Public key Object
            This Users public key, used for checking our signature

        wal: STRING Object
            Represents this user's wallet...
            Got by RIPEMD160 Hashing the SHA256 hash of their public key
    '''

    def __init__(self, prk):
        self.prk = prk
        self.puk = prk.publickey()
        self.wal = User.get_wallet_from_puk(
            self.puk.export_key('PEM').decode('UTF-8'))

    def __init__(self):
        self.prk = RSA.generate(1024)
        self.puk = self.prk.publickey()
        self.wal = User.get_wallet_from_puk(
            self.puk.export_key('PEM'))

    def sign(self, message):
        '''
        Signs a 'message' with this user's private key, returns
        the hash of the message and corresponding signature obhect

        :param message: The STRING object representing the target
        coin hash we're transferring/signing
        :return: Return BYTE ARRAY of SHA256 hash of the given coin_hash,
        and the BYTE ARRAY signature generated by the pss sign class
        '''

        hash_msg = SHA256.new(message.encode())
        signature = pss.new(self.prk).sign(hash_msg)
        return signature

    def get_wallet_from_puk(input_RSA_puk):
        '''
        Class method, returns the Wallet object from the corresponding
        RSA Public Key for transaction verification.

        :param input_RSA_puk: STRING Representing the target RSA pubkey
        :return: Returns STRING representing the generated wallet
        '''
        return RIPEMD160.new(data=SHA256.new(data= input_RSA_puk).digest()).hexdigest()

    def verify_signature(puk, h, signature):
        '''
        Class method, checks to see if the corresponding private key that
        corresponds to the given public key object was used to sign the message.

        :param puk: STRING representing a Public Key object
        :param h: STRING of the ORIGINAL HASH that was SHA256
        hashed to create the signature
        :param signature:
        :return:
        '''
        h = SHA256.new(h.encode())
        puk = RSA.import_key(puk)
        verifier = pss.new(puk)
        try:
            verifier.verify(h, signature)
            return True
        except (ValueError, TypeError):
            return False

    def __str__(self):
        return '%s\n%s\n%s' % ( self.prk.export_key('PEM').decode('UTF-8') , self.puk.export_key('PEM').decode('UTF-8') , self.wal.hexdigest())

